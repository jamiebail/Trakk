@using API.Helpers
@model Trakk.Viewmodels.FixtureEditViewModel



    <div class="form-horizontal">

        <hr/>

        <div class="toolBar row">
            <div class="formations-bar col-xs-5">
                <div class="formation-widget"></div>
            </div>
            <div class="col-xs-2 button-space">
                <div class="saveButton">
                    <span class="glyphicon glyphicon-save"></span>
                </div>
            </div>

            <div class="col-xs-5 formations-bar-second">
                <div class="formation-widget"></div>
            </div>
        </div>
        <div id="formation-interface">
            <div class="pitchFrame" data-fix="@Model.Fixture.Id" oncontextmenu="return false;">

                <div>
                    <div class="col-xs-4 editbutton"><span class="glyphicon glyphicon-pencil"></span></div>
                    <div class="col-xs-4">@Html.TextBox("formation-name", null, new { placeholder = "Formation Name" })</div>
                    <div class="col-xs-4 plusbutton">
                        <span class="glyphicon glyphicon-plus"></span>
                    </div>
                </div>

                <img class="pitch-image" src="@Model.Fixture.HomeTeam.Sport.Pitch.Path" />
                @if (Model.Positions != null)
            {
                foreach (var position in Model.Positions)
                {
                    if (@position.Profile != null)
                    {
                        string imageBase64 = Convert.ToBase64String(position.Profile);
                        string imageSrc = string.Format("data:image/gif;base64,{0}", imageBase64);

                            <div style="position: absolute; top: @position.Top%; left: @position.Left%;" id="@position.PlayerId" class="pitchLocation draggable">

                                @if (position.PlayerId != 0)
                                {
                                    <li class="user-widget" id="@position.PlayerId">
                                        <div class="image">
                                            <img src="@imageSrc" />
                                        </div>
                                        <span class="username">@position.PlayerName</span>
                                    </li>
                                }
                                <input type="text" value="@position.PositionName" placeholder="Position">
                            </div>


                        }
                        else
                        {
                            <div style="position: absolute; top: @position.Top%; left: @position.Left%;" id="@position.PlayerId" class="pitchLocation draggable">

                                @if (position.PlayerId != 0)
                                {
                                    <li class="user-widget" id="@position.PlayerId">
                                        <div class="image">
                                            <img src="~/Images/user.png" />
                                        </div>
                                        <span class="username">@position.PlayerName</span>
                                    </li>

                                }
                                <input type="text" value="@position.PositionName" placeholder="Position">

                            </div>
                        }
                    }
                }
            </div>
            <div class="team-member-widget">
                @Html.Partial("~/Views/Partials/TeamMembersPartial.cshtml", Model.Members)
            </div>
        </div>
        <div class="lower">
            <div id="mainBody">

                <div id="loadingDiv">
                    <img src="~/Images/infinity.gif" />
                </div>
                <p hidden id="team-id"></p>
                <div>
                    <div class="col-xs-5">
                        <h2>@Model.Fixture.HomeTeam.Name</h2>
                        @if (Model.Side == TrakkEnums.Side.Home)
                        {
                            <p hidden class="side" id="@TrakkEnums.Side.Home"></p>
                        }
                        else if (Model.Side == TrakkEnums.Side.Away)
                        {
                            <p hidden class="side" id="@TrakkEnums.Side.Away"></p>
                        }
                        <p hidden id="homeTeamEdit">@Model.Fixture.HomeId</p>
                    </div>
                    <div class="col-xs-2">
                        <h2>V</h2>
                    </div>
                    <div class="col-xs-5">
                        <h2 class="awayTeamFixture">@Model.Fixture.AwayTeam.Name</h2>
                        <h2 hidden id="awayTeamEdit">@Model.Fixture.AwayId</h2>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-xs-6">
                        @Html.EditorFor(model => model.Fixture.Start, new {htmlAttributes = new {@class = "form-control datetimepicker ", placeholder = "Start Time", @Value = Model.Fixture.Start.Value.ToString("yyyy-MM-dd HH:mm") } })
                        @Html.ValidationMessageFor(model => model.Fixture.Start, "", new {@class = "text-danger"})
                    </div>



                    <div class="col-xs-6">
                        @Html.EditorFor(model => model.Fixture.End,new {htmlAttributes = new {@class = "form-control datetimepicker", placeholder = "End Time", @Value = Model.Fixture.End.Value.ToString("yyyy-MM-dd HH:mm") } })
                        @Html.ValidationMessageFor(model => model.Fixture.End, "", new {@class = "text-danger"})
                    </div>



                    <div class="col-xs-6">
                        @Html.EditorFor(model => model.Fixture.Location, new {htmlAttributes = new {@class = "form-control", placeholder = "Location"}})
                        @Html.ValidationMessageFor(model => model.Fixture.Location, "", new {@class = "text-danger"})
                    </div>



                    <div class="col-xs-6">
                        @Html.EditorFor(model => model.Fixture.Comments, new {htmlAttributes = new {@class = "form-control", placeholder = "Comments"}})
                        @Html.ValidationMessageFor(model => model.Fixture.Comments, "", new {@class = "text-danger"})
                    </div>
                </div>
                <div class="col-md-12">
                    <input type="submit" value="Update Fixture" id="editFixture" class="btn btn-success" />
                </div>
            </div>

            <div class="form-group">

            </div>
            <div class="danger-zone">
                <a class="btn btn-danger deleteFixture">Delete Fixture</a>
            </div>

        </div>
    </div>




@section Scripts {
    @Scripts.Render("~/Scripts/jquery.ui.touch-punch.min.js")
    <script>
        $(document).ready(function() {


        $(".user-list").droppable({
            hoverClass: 'drop-hover',
            drop: function (event, ui) {
                var draggable = $(ui.draggable[0]),
                    draggableOffset = draggable.offset(),
                    container = $(event.target),
                    containerOffset = container.offset();
                refreshFormationBar();

                draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);

            }
        });

        function refreshFormationBar() {
            var teamId = $("#homeTeam").val();
            $(".formations-bar").load("/Fixtures/GetTeamFormations", { teamId: teamId, second: false }, function () {
                if ($(".formations-bar").children().length === 4) {
                    $(".formations-bar-second").load("/Fixtures/GetTeamFormations", { teamId: teamId, second: true });
                }
            });
        }

        $(".pitchLocation").droppable({
            hoverClass: 'drop-hover',
            drop: function (event, ui) {
                var draggable = $(ui.draggable[0]),
                    draggableOffset = draggable.offset(),
                    container = $(event.target),
                    containerOffset = container.offset();

                $('.user-widget', event.target).appendTo(droppableParent).css({ opacity: 0 }).animate({ opacity: 1 }, 200);

                draggable.prependTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);
            }
        });
        });




    </script>
}