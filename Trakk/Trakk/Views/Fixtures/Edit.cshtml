@model Trakk.Viewmodels.FixtureEditViewModel

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        <div class="toolBar row">
            <div class="formations-bar col-xs-5">
                <div class="formation-widget"></div>
            </div>
            <div class="col-xs-2 button-space">
                <div class="saveButton">
                    <span class="glyphicon glyphicon-save"></span>
                </div>
            </div>

            <div class="col-xs-5 formations-bar-second">
                <div class="formation-widget"></div>
            </div>
        </div>
        <div class="pitchFrame" id="@Model.Fixture.Id" oncontextmenu="return false;">

            <div>
                <div class="col-xs-4 editbutton"><span class="glyphicon glyphicon-pencil"></span></div>
                <div class="col-xs-4">@Html.TextBox("formation-name", null, new { placeholder = "Formation Name" })</div>
                <div class="col-xs-4 plusbutton">
                    <span class="glyphicon glyphicon-plus"></span>
                </div>
            </div>

            <img src="../../Images/footballPitchReal.png" />
            @foreach (var position in Model.Positions)
            {
                <div style="position: absolute; top: @position.Top%; left: @position.Left%;" id="@position.PlayerId" class="pitchLocation draggable">
                    <input type="text" value="@position.PositionName" placeholder="Position">

                    @if (position.PlayerId != 0)
                    {
                        <li class="user-widget" id="@position.PlayerId">
                            <div class="image"></div>
                            <span class="username">@position.PlayerName</span>
                        </li>
                    }
                </div>
            }
        </div>
        <div class="team-member-widget">
            @Html.Partial("~/Views/Partials/TeamMembersPartial.cshtml", Model.Members)
        </div>
        <div id="mainBody">

            <p hidden id="team-id"></p>
            <div>
                <div class="col-xs-5">
                    <h2>@Model.Fixture.HomeTeam.Name</h2>
                    <p hidden id="homeTeamEdit">@Model.Fixture.HomeId</p>
                </div>
                <div class="col-xs-2">
                    <h2>V</h2>
                </div>
                <div class="col-xs-5">
                    <h2 class="awayTeamFixture">@Model.Fixture.AwayTeam.Name</h2>
                    <h2 hidden id="awayTeamEdit">@Model.Fixture.AwayId</h2>
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-6">
                    @Html.EditorFor(model => model.Fixture.Start, new { htmlAttributes = new { @class = "form-control", placeholder = "Start Time" } })
                    @Html.ValidationMessageFor(model => model.Fixture.Start, "", new { @class = "text-danger" })
                </div>



                <div class="col-xs-6">
                    @Html.EditorFor(model => model.Fixture.End, new { htmlAttributes = new { @class = "form-control", placeholder = "End Time" } })
                    @Html.ValidationMessageFor(model => model.Fixture.End, "", new { @class = "text-danger" })
                </div>



                <div class="col-xs-6">
                    @Html.EditorFor(model => model.Fixture.Location, new { htmlAttributes = new { @class = "form-control", placeholder = "Location" } })
                    @Html.ValidationMessageFor(model => model.Fixture.Location, "", new { @class = "text-danger" })
                </div>



                <div class="col-xs-6">
                    @Html.EditorFor(model => model.Fixture.Comments, new { htmlAttributes = new { @class = "form-control", placeholder = "Comments" } })
                    @Html.ValidationMessageFor(model => model.Fixture.Comments, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">

        </div>
    </div>

}

<div class="col-md-12">
    <input type="submit" value="Create" id="editFixture" class="btn btn-default"/>
</div>


@section Scripts {
    <script>
        $(document).ready(function() {
            $(".user-widget").draggable({
                start: function () {

                },
                drag: function () {

                },
                stop: function () {
                    $(".saveButton").removeClass("saved");
                    $(".saveButton span").removeClass("glyphicon-saved").addClass("glyphicon-save");
                },
                containment: "body-content"
            });
       
        }); 

        $(".user-list").droppable({
            hoverClass: 'drop-hover',
            drop: function (event, ui) {
                var draggable = $(ui.draggable[0]),
                    draggableOffset = draggable.offset(),
                    container = $(event.target),
                    containerOffset = container.offset();
                refreshFormationBar();

                draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);

            }
        });

        function refreshFormationBar() {
            var teamId = $("#homeTeam").val();
            $(".formations-bar").load("/Fixtures/GetTeamFormations", { teamId: teamId, second: false }, function () {
                if ($(".formations-bar").children().length === 4) {
                    $(".formations-bar-second").load("/Fixtures/GetTeamFormations", { teamId: teamId, second: true });
                }
            });
        }

        $(".pitchLocation").droppable({
            hoverClass: 'drop-hover',
            drop: function (event, ui) {
                var draggable = $(ui.draggable[0]),
                    draggableOffset = draggable.offset(),
                    container = $(event.target),
                    containerOffset = container.offset();

                $('.user-widget', event.target).appendTo(droppableParent).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ opacity: 1 }, 200);

                draggable.appendTo(container).css({ left: draggableOffset.left - containerOffset.left, top: draggableOffset.top - containerOffset.top }).animate({ left: 0, top: 0 }, 200);
            }
        });

    </script>
}