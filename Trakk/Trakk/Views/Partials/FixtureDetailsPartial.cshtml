@using API.Helpers
@using Trakk.Models
@model Trakk.Viewmodels.FixtureViewModel

<div class="pitchFrame-static" id="@Model.Fixture.Id" oncontextmenu="return false;">
    <a href="@Url.Action("Edit", "Fixtures", new {id = @Model.Fixture.Id})"><span class="glyphicon glyphicon-pencil edit-team"></span></a>
    <img src="../../Images/footballPitchReal.png"/>
    @if (Model.Side == TrakkEnums.Side.Home)
    {
        <p hidden class="team">@Model.HomeTeam.Id</p>
    }
    else
    {
        <p hidden class="team">@Model.AwayTeam.Id</p>
    }

    @if (Model.Positions != null)
    {
        foreach (var position in Model.Positions)
         {
             if (Model.UserId == @position.PlayerId)
             {
                 <div style="position: absolute; top: @position.Top%; left: @position.Left%;" id="@position.PlayerId" class="pitchLocation-static usersposition draggable">
                     <input type="text" value="@position.PositionName" placeholder="Position">
                     @if (position.PlayerId != 0)
                     {
                         <li class="user-widget-static" id="@position.PlayerId">
                             <div class="image-static"></div>
                             <span class="username-static">@position.PlayerName</span>
                         </li>
                     }
                 </div>
             }
             else

             {
                 <div style="position: absolute; top: @position.Top%; left: @position.Left%;" id="@position.PlayerId" class="pitchLocation-static draggable">
                     <input type="text" value="@position.PositionName" placeholder="Position">

                     @if (position.PlayerId != 0)
                     {
                         <li class="user-widget-static" id="@position.PlayerId">
                             <div class="image-static"></div>
                             <span class="username-static">@position.PlayerName</span>
                         </li>
                     }
                 </div>
             }
         }
    }
</div>
<div class="clear"></div>
<div class="team-member-widget-static">
    <div class="col-xs-12" style="padding: 0; margin-top: 10px; min-height: 0;">
        <div class="attendance">

            <div>@Html.Partial("/Views/Partials/AttendancePartial.cshtml", @Model.Fixture)</div>

        </div>
    </div>
    <div class="clear"></div>
    @if (@Model.Playing.Count > 0)
    {
        @Html.Partial("~/Views/Partials/TeamMembersPartial.cshtml", @Model.Playing)
    }
</div>

<div class="fixture-details-widget">
    <div class="currentUser" id="@Model.UserId"></div>

    <div class="row">
        <div class="homeTeam col-xs-5">
            @if (Model.Fixture.Result != null)
            {
                <h1 class="col-xs-12">@Model.Fixture.Result.HomeScore</h1>
            }
            @if (Model.Side == TrakkEnums.Side.Home)
            {
                <h3 class="col-xs-12 yourteam">@Model.HomeTeam.Name</h3>
            }
            else
            {
                <h3 class="col-xs-12">@Model.HomeTeam.Name</h3>
            }

        </div>
        <h2 class="col-xs-2" style="text-align: center"> vs </h2>
        <div class="awayTeam col-xs-5">
            @if (Model.Fixture.Result != null)
            {
                <h1 class="col-xs-12">@Model.Fixture.Result.AwayScore</h1>
            }
            @if (Model.Side == TrakkEnums.Side.Away)
            {
                <h3 class="col-xs-12 yourteam">@Model.AwayTeam.Name</h3>
            }
            else
            {
                <h3 class="col-xs-12">@Model.AwayTeam.Name</h3>
            }

        </div>
    </div>


    @if (Model.Fixture.Result != null)
    {


        <div class="row">
            <div class=" col-xs-5">
                @foreach (var goal in Model.Fixture.Result.Goals.OrderBy(x => x.Minute).Where(x => x.Side == TrakkEnums.Side.Home))
                {
                    <div class="col-md-3">
                        <hr/>
                        <img src="~/Images/soccer-ball.png"/>
                        <h5>@goal.Scorer.Name</h5>
                        <h5>@goal.Minute'</h5>
                    </div>
                }
            </div>
            <div class="col-xs-1"></div>
            <div class="col-xs-1" style="border-left: 1px solid #acacac"></div>
            <div class=" col-xs-5">
                @foreach (var goal in Model.Fixture.Result.Goals.OrderBy(x => x.Minute).Where(x => x.Side == TrakkEnums.Side.Away))
                {
                    <div class="col-md-3">
                        <hr/>
                        <img src="~/Images/soccer-ball.png"/>
                        <h5>@goal.Scorer.Name</h5>
                        <h5>@goal.Minute'</h5>

                    </div>
                }
            </div>
        </div>
    <hr/>
    <div class="row">
        <div class="col-xs-6">
            @foreach (var card in Model.Fixture.Result.Cards.Where(x => x.Side == TrakkEnums.Side.Home))
            {
                switch (card.CardColour)
                {
                    case CardColour.Yellow:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/yellow.png" />
                        break;
                    case CardColour.Red:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/red.png" />
                        break;
                    case CardColour.TwoYellow:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/yellow.png" />
                        <img src="~/Images/red.png" />
                        break;
                    case CardColour.Green:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/green.png" />
                        break;
                }
            }
        </div>
        <div class="col-xs-6">
            @foreach (var card in Model.Fixture.Result.Cards.Where(x => x.Side == TrakkEnums.Side.Away))
            {
                switch (card.CardColour)
                {
                    case CardColour.Yellow:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/yellow.png"/>
                        break;
                    case CardColour.Red:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/red.png"/>
                        break;
                    case CardColour.TwoYellow:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/yellow.png"/>
                        <img src="~/Images/red.png"/>
                        break;
                    case CardColour.Green:
                        <h6>@card.Player.Name</h6>
                        <img src="~/Images/green.png"/>
                        break;
                }

            }

        </div>

        <hr class="clear"/>
    </div>

    }
        <div class="row">
            <div class="col-xs-6">
                <span class="glyphicon glyphicon-time start-glyphicon"></span>
                @Html.DisplayFor(model => Model.Fixture.Start, new { htmlAttributes = new { @class = "form-control", placeholder = "Start Time" } })
                @Html.ValidationMessageFor(model => Model.Fixture.Start, "", new { @class = "text-danger" })
            </div>

            <div class="col-xs-6">
                <span class="glyphicon glyphicon-time end-glyphicon"></span>
                @Html.DisplayFor(model => Model.Fixture.End, new { htmlAttributes = new { @class = "form-control", placeholder = "End Time" } })
                @Html.ValidationMessageFor(model => Model.Fixture.End, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="clear"></div>
        <div class="row">
            <div class="col-md-6">
                <span class="glyphicon glyphicon-map-marker map-glyphicon"></span>
                @Html.DisplayFor(model => model.Fixture.Location, new { htmlAttributes = new { @class = "form-control", placeholder = "Location" } })
                @Html.ValidationMessageFor(model => model.Fixture.Location, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-6">
                <span class="glyphicon glyphicon-comment comment-glyphicon"></span>
                @Html.DisplayFor(model => model.Fixture.Comments, new { htmlAttributes = new { @class = "form-control", placeholder = "Comments" } })
                @Html.ValidationMessageFor(model => model.Fixture.Comments, "", new { @class = "text-danger" })
            </div>
            <div class="clear"></div>
        </div>
    <hr class="clear"/>
        @if (Model.Fixture.State == TrakkEnums.FixtureState.Finished)
            {
            <div>@Html.Partial("/Views/Partials/GameREportPartial.cshtml", @Model.Fixture.Result)</div>
                <ul hidden class="available-List">
                    @foreach (var player in @Model.Playing)
                    {
                        <li id="@player.Id">@player.Name</li>
                    }
                </ul>
        }

        <div class="clear"></div>
        <div>
        </div>
    </div>


